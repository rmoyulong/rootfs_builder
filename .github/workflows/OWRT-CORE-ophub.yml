#云编译公用核心
name: OWRT-CORE-ophub

on:
  #公用核心标识
  workflow_call:
    inputs:
      OWRT_TARGET:
        required: true
        type: string
      OWRT_THEME:
        required: true
        type: string
      OWRT_NAME:
        required: true
        type: string
      OWRT_URL:
        required: true
        type: string
      OWRT_PW:
        required: true
        type: string
      OWRT_IP:
        required: true
        type: string
      OWRT_CFG:
        required: true
        type: string
      OWRT_BRANCH:
        required: true
        type: string
      OWRT_TYPE:
        required: true
        type: string
      OWRT_LINUX:
        required: true
        type: string
      OWRT_FILES:
        required: true
        type: string
      OWRT_DIY_P1_SH:
        required: true
        type: string
      OWRT_DIY_P2_SH:
        required: true
        type: string
      OWRT_STORAGE:
        required: true
        type: string 
      kernel_repo:
        required: true
        type: string
      kernel_usage:
        required: true
        type: string
      builder_name:
        required: true
        type: string
      auto_kernel:
        required: true
        type: string    
      
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  OWRT_TARGET: ${{inputs.OWRT_TARGET}}
  OWRT_THEME: ${{inputs.OWRT_THEME}}
  OWRT_NAME: ${{inputs.OWRT_NAME}}
  OWRT_URL: ${{inputs.OWRT_URL}}
  OWRT_PW: ${{inputs.OWRT_PW}}
  OWRT_IP: ${{inputs.OWRT_IP}}
  OWRT_CFG: ${{inputs.OWRT_CFG}}
  OWRT_BRANCH: ${{inputs.OWRT_BRANCH}}
  OWRT_TYPE: ${{inputs.OWRT_TYPE}}
  OWRT_LINUX: ${{inputs.OWRT_LINUX}}
  OWRT_FILES: ${{inputs.OWRT_FILES}}
  OWRT_STORAGE: ${{inputs.OWRT_STORAGE}}
  OWRT_DIY_P1_SH: ${{inputs.OWRT_DIY_P1_SH}}
  OWRT_DIY_P2_SH: ${{inputs.OWRT_DIY_P2_SH}}
  kernel_repo: ${{inputs.kernel_repo}}
  kernel_usage: ${{inputs.kernel_usage}}
  builder_name: ${{inputs.builder_name}}
  auto_kernel: ${{inputs.auto_kernel}}
  TZ: Asia/Shanghai
  #USE_CACHEWRTBUILD: true
  
jobs:
  owrt_core_source:
    runs-on: ubuntu-latest
    steps:
      - name: 项目检查
        uses: actions/checkout@main

      - name: 检查分配的服务器性能
        run: |
          echo "警告⚠"
          echo "若分配的服务器性能不足，务必及时取消，重新运行！"
          echo "已知编译成功CPU型号：8370C,8171M,7763"
          echo "已知性能不足CPU型号：8272CL"
          echo -e "-------------- ------------CPU信息------------------------------------------\n"
          echo "CPU物理数量:$(cat /proc/cpuinfo| grep "physical id"| sort| uniq| wc -l)"
          echo -e "CPU核心及版本信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
          echo "-------------------------------内存信息-------------------------------------------"
          echo "已安装内存详细信息："
          sudo lshw -short -C memory | grep GiB
          echo -e "\n"
          echo "-----------------------------硬盘信息---------------------------------------------"
          echo -e  "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l) \n"
          echo "硬盘详情："
          df -Th 
          
      - name: 初始化编译环境
        env:
          DEBIAN_FRONTEND: noninteractive
        run: |
          docker rmi $(docker images -q)
          sudo -E rm -rf $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "1{s/\r$//;p;q}")
          sudo -E apt -yqq update
          sudo -E apt -yqq purge $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "2{s/\r$//;p;q}")
          sudo -E apt -yqq full-upgrade
          sudo -E apt -yqq install $(cat $GITHUB_WORKSPACE/Depends.txt | sed -n "3{s/\r$//;p;q}")
          sudo -E apt -yqq autoremove --purge
          sudo -E apt -yqq autoclean
          sudo -E apt -yqq clean
          sudo -E systemctl daemon-reload
          sudo -E timedatectl set-timezone "Asia/Shanghai"
          sudo mkdir -p /workdir
          sudo chown $USER:$GROUPS /workdir

      - name: 初始化变量
        run: |
          export OWRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
          export OWRT_SOURCE=$(echo $OWRT_URL | cut -d '/' -f 5-)
          #export OWRT_TYPE="cortex-a53"

          echo "OWRT_SOURCE=$OWRT_SOURCE" >> $GITHUB_ENV
          echo "OWRT_TARGET=$OWRT_TARGET" >> $GITHUB_ENV
          echo "OWRT_DATE=$OWRT_DATE" >> $GITHUB_ENV
          echo "OWRT_TYPE=$OWRT_TYPE" >> $GITHUB_ENV
          echo "OWRT_PW=$OWRT_PW" >> $GITHUB_ENV
          echo "OWRT_IP=$OWRT_IP" >> $GITHUB_ENV
          echo "OWRT_LINUX=$OWRT_LINUX" >> $GITHUB_ENV
          echo "OWRT_FILES=$OWRT_FILES" >> $GITHUB_ENV
          echo "OWRT_STORAGE=$OWRT_STORAGE" >> $GITHUB_ENV

      - name: 检查脚本
        run: |
          cd ./sh

          dos2unix ./*.sh
          chmod +x ./*.sh

      - name: 克隆源码库
        id: codes
        working-directory: /workdir        
        run: |
          # Set up compilation source code
          if [[ "${{ inputs.OWRT_URL }}" == *"openwrt"* ]]; then
              REPO_URL="https://github.com/openwrt/openwrt"
              REPO_BRANCH="main"
              TAGS_NAME="official"
          elif [[ "${{ inputs.OWRT_URL }}" == *"lede"* ]]; then
              REPO_URL="https://github.com/coolsnowwolf/lede"
              REPO_BRANCH="master"
              TAGS_NAME="lede"
          elif [[ "${{ inputs.OWRT_URL }}" == *"immortalwrt"* ]]; then
              REPO_URL="https://github.com/immortalwrt/immortalwrt"
              REPO_BRANCH="master"
              TAGS_NAME="immortalwrt"
          else
              echo "Unknown source code repository."
              exit 1
          fi        
        
          df -hT $PWD
          git clone -q --single-branch --depth=1 --branch=${REPO_BRANCH} ${REPO_URL} openwrt
          #git clone $OWRT_URL openwrt
          ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt
          [ -e $GITHUB_WORKSPACE/Config/$OWRT_CFG ] && echo "DEVICE_NAME=$(grep '^CONFIG_TARGET_.*_.*_DEVICE_.*=y' $GITHUB_WORKSPACE/Config/$OWRT_CFG | sed -r 's/.*DEVICE_(.*)=y/\1/')" >> $GITHUB_ENV
          
          # Set output information
          echo "build_tag=OpenWrt_${OWRT_TARGET}_${{ env.OWRT_STORAGE }}_$(date +"%Y.%m")" >> ${GITHUB_OUTPUT}
          echo -e "REPO_URL: [ ${REPO_URL} ]\nREPO_BRANCH: [ ${REPO_BRANCH} ]\nTAGS_NAME: [ ${OWRT_NAME} ]"
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}          

      #- name: 加载自定义订阅源
        #run: |
          #cd openwrt
          #echo 'src-git mo_small https://github.com/kenzok8/small-package' >>feeds.conf.default
          #echo "COMMIT_HASH=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: 启动缓存[第二次起生效]
        uses: rmoyulong/cachewrtbuild@main
        with:
          ccache: 'true'
          prefix: ${{ github.workspace }}/openwrt
          mixkey: ${{ env.OWRT_URL }}/tree/${{ env.OWRT_BRANCH }}?device=${{ env.DEVICE_NAME }}-${{ env.OWRT_NAME }} 

      - name: 更新订阅源
        run: |
          [[ -f "${FEEDS_CONF}" ]] && cp -f ${FEEDS_CONF} openwrt/feeds.conf.default
          
          cd openwrt
          ${GITHUB_WORKSPACE}/${OWRT_DIY_P1_SH}

      - name: 安装订阅源
        run: |
          cd openwrt
          ./scripts/feeds update -a
          ./scripts/feeds install -a

      - name: 自定义脚本
        run: |
          
          cd openwrt
          
          if [[ $DIY_P1_SH == *"quick.sh"*  ]] ; then
            ${GITHUB_WORKSPACE}/${OWRT_DIY_P2_SH}
          else
            ${GITHUB_WORKSPACE}/${OWRT_DIY_P2_SH}
            #删除冲突的插件 
            rm -rf feeds/kenzo8/{base-files,dnsmasq,firewall*,fullconenat,libnftnl,nftables,ppp,opkg,ucl,upx,vsftpd-alt,miniupnpd-iptables,wireless-regdb}
          fi          

      - name: 自定义设置
        run: |
          [[ -f "$GITHUB_WORKSPACE/$OWRT_FILES" ]] && cp -f $GITHUB_WORKSPACE/$OWRT_FILES openwrt/files
          cd openwrt

          rm -rf ./tmp* ./.config*
          #rm -rf $(find ./ -type f -iname "*.config*")*          
          #make dirclean
          [ -e $GITHUB_WORKSPACE/Config/$OWRT_CFG ] && mv $GITHUB_WORKSPACE/Config/$OWRT_CFG .config

      - name: 下载编译依赖
        id: package
        run: |
          cd openwrt/
          make defconfig
          make download -j8
          find dl -size -1024c -exec ls -l {} \;
          find dl -size -1024c -exec rm -f {} \;

      - name: 编译固件
        id: compile
        run: |
          cd openwrt/
          echo -e "$(nproc) thread compile"
          make -j$(($(nproc) + 1)) V=s || make -j1 || make -j1 V=s
          echo "status=success" >> $GITHUB_OUTPUT
          echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV 

      - name: 清理服务器空间
        id: clean
        if: ${{ steps.compile.outputs.status }} == 'success' && !cancelled()
        run: |
          # Clean up server space
          
          cd openwrt/
          mkdir output
          cp -f bin/targets/*/*/*rootfs.* output/
          cp -f .config output/config
          rm -rf $(ls . | grep -v "^output$" | xargs) 2>/dev/null
          
          # Generate sha256sum file
          cd output/
          ls
          for file in *; do [[ ! -d "${file}" ]] && sha256sum "${file}" >"${file}.sha"; done

          # Set output information
          df -hT ${PWD}
          echo "status=success" >> ${GITHUB_OUTPUT}

      - name: 打包OpenWrt
        if: ${{ steps.clean.outputs.status }} == 'success' && !cancelled()
        uses: ophub/amlogic-s9xxx-openwrt@main
        with:
          openwrt_path: openwrt/output/*rootfs.tar.gz
          openwrt_board: ${{ env.OWRT_TARGET }}
          openwrt_kernel: ${{ env.OWRT_LINUX }}
          auto_kernel: ${{ inputs.auto_kernel }}
          kernel_repo: ${{ inputs.kernel_repo }}
          kernel_usage: ${{ inputs.kernel_usage }}
          builder_name: ${{ inputs.builder_name }}

      - name: 上传固件
        uses: rmoyulong/action-gh-release@master
        if: ${{ env.PACKAGED_STATUS == 'success' }} && !cancelled()
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: OpenWrt_${{ env.OWRT_TARGET }}_${{ env.OWRT_DATE }}
          files: ${{ env.PACKAGED_OUTPUTPATH }}/*
          body: |
            自用${{env.OWRT_TYPE}}固件！首次使用建议全新刷写！
            =============基本信息============

            源码：${{env.OWRT_SOURCE}}
            平台：${{env.OWRT_TARGET}}
            设备：${{env.OWRT_TYPE}}
            密码：${{env.OWRT_PW}}
            地址：${{env.OWRT_IP}}
            内核：${{env.OWRT_LINUX}}

      - name: 清理Releases
        uses: rmoyulong/delete-older-releases@master
        with:
          keep_latest: 6
          delete_tags: true

      - name: 清理Workflows
        uses: rmoyulong/delete-workflow-runs@main
        with:
          retain_days: 0
          keep_minimum_runs: 1
